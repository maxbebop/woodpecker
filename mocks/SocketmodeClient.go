// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	socketmode "github.com/slack-go/slack/socketmode"
)

// SocketmodeClient is an autogenerated mock type for the SocketmodeClient type
type SocketmodeClient struct {
	mock.Mock
}

// Ack provides a mock function with given fields: req, payload
func (_m *SocketmodeClient) Ack(req socketmode.Request, payload ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, req)
	_ca = append(_ca, payload...)
	_m.Called(_ca...)
}

// EventsIn provides a mock function with given fields:
func (_m *SocketmodeClient) EventsIn() <-chan socketmode.Event {
	ret := _m.Called()

	var r0 <-chan socketmode.Event
	if rf, ok := ret.Get(0).(func() <-chan socketmode.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan socketmode.Event)
		}
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *SocketmodeClient) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSocketmodeClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocketmodeClient creates a new instance of SocketmodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocketmodeClient(t mockConstructorTestingTNewSocketmodeClient) *SocketmodeClient {
	mock := &SocketmodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package chatservice_test

import (
	context "context"
	chatservice "woodpecker/internal/services/chat"

	mock "github.com/stretchr/testify/mock"

	structlog "github.com/powerman/structlog"
)

// ChatBot is an autogenerated mock type for the ChatBot type
type ChatBot struct {
	mock.Mock
}

// GetMessagesLoop provides a mock function with given fields: ctx, inMsgChannel, log
func (_m *ChatBot) GetMessagesLoop(ctx context.Context, inMsgChannel chan chatservice.Message, log *structlog.Logger) {
	_m.Called(ctx, inMsgChannel, log)
}

// Run provides a mock function with given fields:
func (_m *ChatBot) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: msg
func (_m *ChatBot) SendMessage(msg chatservice.OutMessage) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(chatservice.OutMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatBot interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatBot creates a new instance of ChatBot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatBot(t mockConstructorTestingTNewChatBot) *ChatBot {
	mock := &ChatBot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

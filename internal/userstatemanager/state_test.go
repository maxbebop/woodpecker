// Code generated by mockery v2.20.0. DO NOT EDIT.

package userstatemanager_test

import (
	models "woodpecker/internal/models"

	mock "github.com/stretchr/testify/mock"

	userstatemanager "woodpecker/internal/userstatemanager"
)

// state is an autogenerated mock type for the state type
type state struct {
	mock.Mock
}

// compute provides a mock function with given fields: env, handler
func (_m *state) compute(env models.Environment, handler userstatemanager.StateHandler) error {
	ret := _m.Called(env, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Environment, userstatemanager.StateHandler) error); ok {
		r0 = rf(env, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewState interface {
	mock.TestingT
	Cleanup(func())
}

// newState creates a new instance of state. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newState(t mockConstructorTestingTnewState) *state {
	mock := &state{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

// GetUserInfo provides a mock function with given fields: user
func (_m *SlackClient) GetUserInfo(user string) (*slack.User, error) {
	ret := _m.Called(user)

	var r0 *slack.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*slack.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) *slack.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMessage provides a mock function with given fields: channelID, options
func (_m *SlackClient) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) (string, string, error)); ok {
		return rf(channelID, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = rf(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewSlackClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackClient creates a new instance of SlackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackClient(t mockConstructorTestingTNewSlackClient) *SlackClient {
	mock := &SlackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
